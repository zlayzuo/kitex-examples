// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package item

import (
	"context"
	"example_shop/kitex_gen/example/shop/base"
	"fmt"
)

type Item struct {
	Id    int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	Title string `thrift:"title,2" frugal:"2,default,string" json:"title"`
	Desc  string `thrift:"desc,3" frugal:"3,default,string" json:"desc"`
	Stock int64  `thrift:"stock,4" frugal:"4,default,i64" json:"stock"`
}

func NewItem() *Item {
	return &Item{}
}

func (p *Item) InitDefault() {
}

func (p *Item) GetId() (v int64) {
	return p.Id
}

func (p *Item) GetTitle() (v string) {
	return p.Title
}

func (p *Item) GetDesc() (v string) {
	return p.Desc
}

func (p *Item) GetStock() (v int64) {
	return p.Stock
}
func (p *Item) SetId(val int64) {
	p.Id = val
}
func (p *Item) SetTitle(val string) {
	p.Title = val
}
func (p *Item) SetDesc(val string) {
	p.Desc = val
}
func (p *Item) SetStock(val int64) {
	p.Stock = val
}

func (p *Item) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Item(%+v)", *p)
}

var fieldIDToName_Item = map[int16]string{
	1: "id",
	2: "title",
	3: "desc",
	4: "stock",
}

type GetItemReq struct {
	Id int64 `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
}

func NewGetItemReq() *GetItemReq {
	return &GetItemReq{}
}

func (p *GetItemReq) InitDefault() {
}

func (p *GetItemReq) GetId() (v int64) {
	return p.Id
}
func (p *GetItemReq) SetId(val int64) {
	p.Id = val
}

func (p *GetItemReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetItemReq(%+v)", *p)
}

var fieldIDToName_GetItemReq = map[int16]string{
	1: "id",
}

type GetItemResp struct {
	Item     *Item          `thrift:"item,1" frugal:"1,default,Item" json:"item"`
	BaseResp *base.BaseResp `thrift:"baseResp,255" frugal:"255,default,base.BaseResp" json:"baseResp"`
}

func NewGetItemResp() *GetItemResp {
	return &GetItemResp{}
}

func (p *GetItemResp) InitDefault() {
}

var GetItemResp_Item_DEFAULT *Item

func (p *GetItemResp) GetItem() (v *Item) {
	if !p.IsSetItem() {
		return GetItemResp_Item_DEFAULT
	}
	return p.Item
}

var GetItemResp_BaseResp_DEFAULT *base.BaseResp

func (p *GetItemResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetItemResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetItemResp) SetItem(val *Item) {
	p.Item = val
}
func (p *GetItemResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *GetItemResp) IsSetItem() bool {
	return p.Item != nil
}

func (p *GetItemResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetItemResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetItemResp(%+v)", *p)
}

var fieldIDToName_GetItemResp = map[int16]string{
	1:   "item",
	255: "baseResp",
}

type ItemService interface {
	GetItem(ctx context.Context, req *GetItemReq) (r *GetItemResp, err error)
}

type ItemServiceGetItemArgs struct {
	Req *GetItemReq `thrift:"req,1" frugal:"1,default,GetItemReq" json:"req"`
}

func NewItemServiceGetItemArgs() *ItemServiceGetItemArgs {
	return &ItemServiceGetItemArgs{}
}

func (p *ItemServiceGetItemArgs) InitDefault() {
}

var ItemServiceGetItemArgs_Req_DEFAULT *GetItemReq

func (p *ItemServiceGetItemArgs) GetReq() (v *GetItemReq) {
	if !p.IsSetReq() {
		return ItemServiceGetItemArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ItemServiceGetItemArgs) SetReq(val *GetItemReq) {
	p.Req = val
}

func (p *ItemServiceGetItemArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ItemServiceGetItemArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItemServiceGetItemArgs(%+v)", *p)
}

var fieldIDToName_ItemServiceGetItemArgs = map[int16]string{
	1: "req",
}

type ItemServiceGetItemResult struct {
	Success *GetItemResp `thrift:"success,0,optional" frugal:"0,optional,GetItemResp" json:"success,omitempty"`
}

func NewItemServiceGetItemResult() *ItemServiceGetItemResult {
	return &ItemServiceGetItemResult{}
}

func (p *ItemServiceGetItemResult) InitDefault() {
}

var ItemServiceGetItemResult_Success_DEFAULT *GetItemResp

func (p *ItemServiceGetItemResult) GetSuccess() (v *GetItemResp) {
	if !p.IsSetSuccess() {
		return ItemServiceGetItemResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ItemServiceGetItemResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetItemResp)
}

func (p *ItemServiceGetItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ItemServiceGetItemResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItemServiceGetItemResult(%+v)", *p)
}

var fieldIDToName_ItemServiceGetItemResult = map[int16]string{
	0: "success",
}
