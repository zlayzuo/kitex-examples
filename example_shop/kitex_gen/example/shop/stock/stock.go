// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package stock

import (
	"context"
	"example_shop/kitex_gen/example/shop/base"
	"fmt"
)

type GetItemStockReq struct {
	ItemId int64 `thrift:"item_id,1,required" frugal:"1,required,i64" json:"item_id"`
}

func NewGetItemStockReq() *GetItemStockReq {
	return &GetItemStockReq{}
}

func (p *GetItemStockReq) InitDefault() {
}

func (p *GetItemStockReq) GetItemId() (v int64) {
	return p.ItemId
}
func (p *GetItemStockReq) SetItemId(val int64) {
	p.ItemId = val
}

func (p *GetItemStockReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetItemStockReq(%+v)", *p)
}

var fieldIDToName_GetItemStockReq = map[int16]string{
	1: "item_id",
}

type GetItemStockResp struct {
	Stock    int64          `thrift:"stock,1" frugal:"1,default,i64" json:"stock"`
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" json:"BaseResp"`
}

func NewGetItemStockResp() *GetItemStockResp {
	return &GetItemStockResp{}
}

func (p *GetItemStockResp) InitDefault() {
}

func (p *GetItemStockResp) GetStock() (v int64) {
	return p.Stock
}

var GetItemStockResp_BaseResp_DEFAULT *base.BaseResp

func (p *GetItemStockResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetItemStockResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetItemStockResp) SetStock(val int64) {
	p.Stock = val
}
func (p *GetItemStockResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *GetItemStockResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetItemStockResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetItemStockResp(%+v)", *p)
}

var fieldIDToName_GetItemStockResp = map[int16]string{
	1:   "stock",
	255: "BaseResp",
}

type StockService interface {
	GetItemStock(ctx context.Context, req *GetItemStockReq) (r *GetItemStockResp, err error)
}

type StockServiceGetItemStockArgs struct {
	Req *GetItemStockReq `thrift:"req,1" frugal:"1,default,GetItemStockReq" json:"req"`
}

func NewStockServiceGetItemStockArgs() *StockServiceGetItemStockArgs {
	return &StockServiceGetItemStockArgs{}
}

func (p *StockServiceGetItemStockArgs) InitDefault() {
}

var StockServiceGetItemStockArgs_Req_DEFAULT *GetItemStockReq

func (p *StockServiceGetItemStockArgs) GetReq() (v *GetItemStockReq) {
	if !p.IsSetReq() {
		return StockServiceGetItemStockArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *StockServiceGetItemStockArgs) SetReq(val *GetItemStockReq) {
	p.Req = val
}

func (p *StockServiceGetItemStockArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StockServiceGetItemStockArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StockServiceGetItemStockArgs(%+v)", *p)
}

var fieldIDToName_StockServiceGetItemStockArgs = map[int16]string{
	1: "req",
}

type StockServiceGetItemStockResult struct {
	Success *GetItemStockResp `thrift:"success,0,optional" frugal:"0,optional,GetItemStockResp" json:"success,omitempty"`
}

func NewStockServiceGetItemStockResult() *StockServiceGetItemStockResult {
	return &StockServiceGetItemStockResult{}
}

func (p *StockServiceGetItemStockResult) InitDefault() {
}

var StockServiceGetItemStockResult_Success_DEFAULT *GetItemStockResp

func (p *StockServiceGetItemStockResult) GetSuccess() (v *GetItemStockResp) {
	if !p.IsSetSuccess() {
		return StockServiceGetItemStockResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StockServiceGetItemStockResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetItemStockResp)
}

func (p *StockServiceGetItemStockResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StockServiceGetItemStockResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StockServiceGetItemStockResult(%+v)", *p)
}

var fieldIDToName_StockServiceGetItemStockResult = map[int16]string{
	0: "success",
}
